# Generated by Django 4.0.5 on 2022-07-07 13:00

import django.db.models.deletion
from django.db import migrations, models

import django_countries.fields


def migrate_existing_feature_data(apps, schema_editor):
    try:
        from brand.models.features import (BrandFeature,
                                           FeatureAvailabilityChoice, Features,
                                           FeatureType)
    except (ImportError, ModuleNotFoundError):
        print("Could not import required models for feature migration. Migrating models but not data.")
        return None

    ft_checking = FeatureType.objects.get_or_create(
        name="checking", description="Does the bank provide checkings accounts?"
    )[0]
    ft_saving = FeatureType.objects.get_or_create(
        name="saving", description="Does the bank provide savings accounts?"
    )[0]
    ft_free_checking = FeatureType.objects.get_or_create(
        name="free_checking", description="Does the bank provide checkings accounts?"
    )[0]
    ft_interest_rates = FeatureType.objects.get_or_create(
        name="interest_rates", description="Details about the bank's interest rates?"
    )[0]
    ft_free_atm_withdrawal = FeatureType.objects.get_or_create(
        name="free_atm_withdrawal", description="Does the bank provide free ATM withdrawals?"
    )[0]
    ft_online_banking = FeatureType.objects.get_or_create(
        name="online_banking", description="Does the bank provide online banking?"
    )[0]
    ft_local_branches = FeatureType.objects.get_or_create(
        name="local_branches", description="Does the bank provide local branches?"
    )[0]
    ft_mortgage_or_loans = FeatureType.objects.get_or_create(
        name="mortgage_or_loans", description="Does the bank provide mortgages or loans?"
    )[0]
    ft_deposit_protection = FeatureType.objects.get_or_create(
        name="deposit_protection", description="Details about the bank's deposit protection"
    )[0]
    ft_credit_cards = FeatureType.objects.get_or_create(
        name="credit_cards", description="Does the bank provide credit cards?"
    )[0]
    ft_international_card_payment = FeatureType.objects.get_or_create(
        name="international_card_payment",
        description="Does the bank provide international card payments?",
    )[0]
    ft_business = FeatureType.objects.get_or_create(
        name="business_accounts", description="Does the bank provide business accounts?"
    )[0]

    for feature in Features.objects.all():
        brand = feature.brand

        if feature.checking_saving:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_checking,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.checking_saving_details,
            )

            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_saving,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.checking_saving_details,
            )

        if feature.free_checking:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_free_checking,
                offered=FeatureAvailabilityChoice.MAYBE,
                details=feature.free_checking_details,
            )

        if feature.interest_rates != "":
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_interest_rates,
                offered=FeatureAvailabilityChoice.NOT_APPLICABLE,
                details=feature.interest_rates,
            )

        if feature.free_atm_withdrawal:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_free_atm_withdrawal,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.free_atm_withdrawal_details,
            )

        if feature.online_banking:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_online_banking,
                offered=FeatureAvailabilityChoice.YES,
                details="",
            )

        if feature.local_branches:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_local_branches,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.local_branches_details,
            )

        if feature.mortgage_or_loan:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_mortgage_or_loans,
                offered=FeatureAvailabilityChoice.YES,
                details="",
            )
        
        if feature.deposit_protection != "":
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_deposit_protection,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.deposit_protection,
            )
        
        if feature.credit_cards != "":
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_credit_cards,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.credit_cards_details,
            )
        
        if feature.free_international_card_payment:
            BrandFeature.objects.get_or_create(
                brand=feature.brand,
                applicable_countries=brand.countries,
                feature=ft_international_card_payment,
                offered=FeatureAvailabilityChoice.YES,
                details=feature.free_international_card_payment_details,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('brand', '0004_commentary_fossil_free_alliance'),
    ]

    operations = [
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='i.e. Free Checking account, Credit Card, etc.', max_length=40)),
                ('description', models.TextField(help_text='Description about this feature type')),
            ],
        ),
        migrations.CreateModel(
            name='BrandFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Maybe', 'Maybe'), ('N/A', 'Not Applicable')], default='N/A', help_text='Is the feature offered?', max_length=16)),
                ('details', models.CharField(blank=True, help_text='Details about the feature', max_length=100, null=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_features', to='brand.brand')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feature_type', to='brand.featuretype')),
            ],
        ),
        migrations.RunPython(code=migrate_existing_feature_data),
    ]
